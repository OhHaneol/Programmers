class Solution {
    public String solution(int[] numbers, String hand) {
        String answer = "";
		String right = "R";
		String left = "L";
		int lastL = 10;
		int lastR = 12;

		for (int i = 0; i < numbers.length; i++) {
			// 1,4,7
			if (numbers[i] == 1 || numbers[i] == 4 || numbers[i] == 7) {
				answer = answer.concat(left);
				lastL = numbers[i];
				System.out.println("L ---- L");
			}
			// 3,6,9
			else if (numbers[i] == 3 || numbers[i] == 6 || numbers[i] == 9) {
				answer = answer.concat(right);
				lastR = numbers[i];
				System.out.println("R ---- R");
			}
			// 2,5,8,0
			else {
				int distL = distLeft(numbers[i], lastL);
				int distR = distRight(numbers[i], lastR);
				System.out.println(distL + " ---- " + distR);
				// 거리는 같은데 왼손잡이
				if (distL == distR && hand == "left") {
					answer = answer.concat(left);
					lastL = numbers[i];
				}
                //  여기서!!!!!!!! 문제가 발생하는 것 같음. 거리 같은 것도 맞고 오른손잡이 조건도 걸어줬는데 안의 내용을 실행을 못해서 R을 못찍음.
				// 거리는 같은데 오른손잡이
				else if (distL == distR && hand == "right") {
					answer = answer.concat(right);
					lastR = numbers[i];
				}
				// 왼손이 더 가까운 경우
				else if (distL < distR) {
					answer = answer.concat(left);
					lastL = numbers[i];
				}
				// 오른손이 더 가까운 경우
				else if (distL > distR) {
					answer = answer.concat(right);
					lastR = numbers[i];
				}
			}
        }
        
        return answer;
    }
    
    // 왼손으로부터의 거리 함수
	public static int distLeft(int num, int lastL) {
		int moveL = 0;

		// 1,4,7 에 마지막으로 손가락이 있을 경우 오른쪽으로 한 칸 움직이고
		if (lastL == 1 || lastL == 4 || lastL == 7) {
			++moveL;
			++lastL;
		}
		// lastL==10(*) 도 마찬가지
		else if (lastL == 10) {
			++moveL;
			lastL = 0;
		}
		int dist = Math.abs(lastL - num);
		switch (dist) {
		case 0:
			return moveL;
		case 3:
			++moveL;
			return moveL;
		case 6:
			moveL = moveL + 2;
			return moveL;
		case 2:
			moveL = moveL + 3;
			return moveL;
		case 5:
			moveL = moveL + 2;
			return moveL;
		case 8:
			++moveL;
			return moveL;
		default:
			return moveL;
		}
	}

	// 오른손으로부터의 거리 함수
	public static int distRight(int num, int lastR) {
		int moveR = 0;

		// 3,6,9 에 마지막으로 손가락이 있을 경우 왼쪽으로 한 칸 움직여라
		if (lastR == 3 || lastR == 6 || lastR == 9) {
			++moveR;
			--lastR;
		}
		// lastR==12(#) 도 마찬가지
		else if(lastR == 12) {
			++moveR;
			lastR = 0;
		}
		int dist = Math.abs(lastR - num);
		switch (dist) {
		case 0:
			return moveR;
		case 3:
			++moveR;
			return moveR;
		case 6:
			moveR = moveR + 2;
			return moveR;
		case 2:
			moveR = moveR + 3;
			return moveR;
		case 5:
			moveR = moveR + 2;
			return moveR;
		case 8:
			++moveR;
			return moveR;
		default:
			return moveR;
		}
	}
}
